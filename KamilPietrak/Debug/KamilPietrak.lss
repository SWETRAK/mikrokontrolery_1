
KamilPietrak.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008f8  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ab  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004a9  00000000  00000000  00001093  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  0000153c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000319  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000361  00000000  00000000  000018c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001c2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <z5>:
	
}

void z5() {
	
	PORTA = 0;
  6c:	1b ba       	out	0x1b, r1	; 27
	for(uint8_t i = 7; i>=4; i--){
  6e:	27 e0       	ldi	r18, 0x07	; 7
  70:	15 c0       	rjmp	.+42     	; 0x9c <z5+0x30>
		PORTA |= (1<<i);
  72:	3b b3       	in	r19, 0x1b	; 27
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	02 2e       	mov	r0, r18
  7a:	02 c0       	rjmp	.+4      	; 0x80 <z5+0x14>
  7c:	88 0f       	add	r24, r24
  7e:	99 1f       	adc	r25, r25
  80:	0a 94       	dec	r0
  82:	e2 f7       	brpl	.-8      	; 0x7c <z5+0x10>
  84:	83 2b       	or	r24, r19
  86:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	3f e3       	ldi	r19, 0x3F	; 63
  8a:	8d e0       	ldi	r24, 0x0D	; 13
  8c:	93 e0       	ldi	r25, 0x03	; 3
  8e:	31 50       	subi	r19, 0x01	; 1
  90:	80 40       	sbci	r24, 0x00	; 0
  92:	90 40       	sbci	r25, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <z5+0x22>
  96:	00 c0       	rjmp	.+0      	; 0x98 <z5+0x2c>
  98:	00 00       	nop
}

void z5() {
	
	PORTA = 0;
	for(uint8_t i = 7; i>=4; i--){
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	24 30       	cpi	r18, 0x04	; 4
  9e:	48 f7       	brcc	.-46     	; 0x72 <z5+0x6>
		PORTA |= (1<<i);
		_delay_ms(1000);
	}
	
	PORTA = 0;
  a0:	1b ba       	out	0x1b, r1	; 27
	for(uint8_t i = 0; i<4; i++){
  a2:	20 e0       	ldi	r18, 0x00	; 0
  a4:	15 c0       	rjmp	.+42     	; 0xd0 <z5+0x64>
		PORTA |= (1<<i);
  a6:	3b b3       	in	r19, 0x1b	; 27
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	02 2e       	mov	r0, r18
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <z5+0x48>
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	0a 94       	dec	r0
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <z5+0x44>
  b8:	83 2b       	or	r24, r19
  ba:	8b bb       	out	0x1b, r24	; 27
  bc:	3f e3       	ldi	r19, 0x3F	; 63
  be:	8d e0       	ldi	r24, 0x0D	; 13
  c0:	93 e0       	ldi	r25, 0x03	; 3
  c2:	31 50       	subi	r19, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <z5+0x56>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <z5+0x60>
  cc:	00 00       	nop
		PORTA |= (1<<i);
		_delay_ms(1000);
	}
	
	PORTA = 0;
	for(uint8_t i = 0; i<4; i++){
  ce:	2f 5f       	subi	r18, 0xFF	; 255
  d0:	24 30       	cpi	r18, 0x04	; 4
  d2:	48 f3       	brcs	.-46     	; 0xa6 <z5+0x3a>
		PORTA |= (1<<i);
		_delay_ms(1000);
	}
  d4:	08 95       	ret

000000d6 <main>:


int main(void)
{
    
	DDRA = 0xFF;
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;
  da:	1b ba       	out	0x1b, r1	; 27
    {
		// z1();
		// z2();
		// z3();
		// z4();
		z5();
  dc:	0e 94 36 00 	call	0x6c	; 0x6c <z5>
  e0:	fd cf       	rjmp	.-6      	; 0xdc <main+0x6>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
